"use client"

import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import {
    Form,
    FormControl,
    FormDescription,
    FormField,
    FormItem,
    FormLabel
} from "@/components/ui/form"

import { Separator } from "@/components/ui/separator"
import { ScrollArea } from "@/components/ui/scroll-area"

import { useData } from "@/providers/data-provider"
import { useForm, useFieldArray } from "react-hook-form"
import { useEffect } from "react"
import { useToast } from "@/components/ui/use-toast"
import { X } from "lucide-react"
import { cn, stripTrailingSlash } from "@/lib/utils"

export function VulnerabilitySettings({ vulnerabilityId }) {
    const { settings, setSettings, loadingSettings } = useData()
    const form = useForm()
    const { toast } = useToast()
    const { fields, append, remove } = useFieldArray({
        control: form.control,
        name: "categories"
      });

    async function onSubmit(values) {
        console.log(values)
        const res = await fetch(`/api/settings`, { 
            method: "POST",
            body: JSON.stringify({name: "categories", value: values.categories})
        })

        const data = await res.json()
        let newSettings = settings.filter(setting => setting.name !== "categories")
        newSettings.push(data)

        setSettings(newSettings)
        toast({ description: `Setting "categories" has been updated successfully.` })
        return null
    }


    useEffect(() => {
        form.setValue("categories", settings.find(setting => setting.name === "categories")?.value)
        const down = (e) => {
            if (e.key === "s" && (e.metaKey || e.ctrlKey)) {
                e.preventDefault()
                form.handleSubmit(onSubmit)()
            }
        }

        document.addEventListener("keydown", down)
        return () => document.removeEventListener("keydown", down)
    }, [settings])

    return (
        <div className="space-y-6 h-full">
            <div className="flex flex-row justify-between items-center">
                <div>
                    <h3 className="text-lg font-medium">Vulnerability Settings</h3>
                    <p className="text-sm text-muted-foreground">
                        Change the settings of your Antimatter vulnerabilities.
                    </p>
                </div>
                <div>
                    <Button onClick={() => { form.handleSubmit(onSubmit)() }}>Save (ctrl+s)</Button>
                </div>
            </div>
            <Separator />
            <ScrollArea className="h-full">
                    <Form {...form}>
                    <form onSubmit={() => form.handleSubmit(onSubmit)}>
                        <div className="grid gap-4">
                            <FormField
                                control={form.control}
                                name="categoriesField"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Categories</FormLabel>
                                        <FormDescription>The categories which are available when creating vulnerabilities and findings.</FormDescription>
                                        <FormControl>
                                            <>
                                            {fields.map((category, index) => (
                                                <div className="flex flex-row gap-1 pb-1" key={category}>
                                                    <Input {...form.register(`categories.${index}`)} />
                                                    <Button onClick={(e) => {e.preventDefault(); remove(index)}} variant={"ghost"} size={"icon"}><X className="h-5" /></Button>
                                                </div>
                                            ))}
                                            <Button onClick={(e) => {e.preventDefault(); append("")}}>Create</Button>
                                            </>
                                        </FormControl>
                                    </FormItem>
                                )}
                            />
                        </div>
                    </form>
                </Form>
            </ScrollArea>
        </div>
    )
}